{"version":3,"sources":["d3-helpers/d3-ts-chart.js","components/chart.js","index.js"],"names":["SERIES_TYPES","D3TsChart","elRef","margin","top","right","bottom","left","responsiveHeight","responsiveWidth","xScale","d3","yScale","seriesDict","toggleSeries","id","target","series","hidden","ref","classed","width","height","classList","this","undefined","outerWidth","offsetWidth","outerHeight","offsetHeight","draw","svg","append","attr","group","range","xAxisRef","yAxisRef","name","type","fill","stroke","strokeWidth","Error","includes","data","adjustAxes","window","focused","adjustDimensions","updateAreaSeries","updateLineSeries","datum","transition","duration","ease","x","d","timestamp","y","value","y0","y1","maxValue","domain","call","ticks","tickFormat","MAX_POINTS_TO_STORE","SOCKETIO_ERRORS","Chart","seriesList","label","labelClass","tsChart","state","lastTimestamp","connected","error","connect","socket","socketIOClient","props","sensorId","on","storeReading","forEach","errType","setError","setState","toString","response","reading","JSON","parse","prevState","pointsToStore","Math","max","length","push","slice","Date","toLocaleTimeString","updateChart","render","className","map","key","onClick","parentRef","ReactDOM","findDOMNode","init","getElementsByClassName","addSeries","attachFocusWatcher","disconnect","onblur","onfocus","xTicks","highestValueInView","p","zLine","zscore","setSeriesData","React","Component","x-ticks","document","getElementById"],"mappings":"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","file":"static/js/main.1f8a1349.chunk.js","sourcesContent":["import * as d3 from 'd3';\n\nconst SERIES_TYPES = ['LINE', 'AREA'];\nconst TRANSITION_DURATION = 20;\nconst MAX_Y_TICKS = 6;\n\nexport default class D3TsChart {\n\n  // HTML Element References\n  elRef = null; // SVG Parent container element ref\n  svg; // Main SVG container with margins\n  group; // Inner box group without margins\n\n  // Layout config\n  margin = { top: 10, right: 30, bottom: 30, left: 30 };\n\n  outerWidth; outerHeight;\n\n  // responsive flags will be only true if you don't set width or height in config\n  responsiveHeight = false;\n  responsiveWidth = false;\n\n\n  // Axes\n  xScale = d3.scaleTime();\n  yScale = d3.scaleLinear();\n  xAxisRef;\n  yAxisRef;\n\n  // Series -- used to select and update series\n  seriesDict = {\n    // \"seriesname\": { type: SERIES_TYPES, ref: d3 object}\n  };\n\n  /**\n   * @param Config {\n   *    elRef: container Element reference, \n   *    width,\n   *    height,\n   *    classList: { svg, group } //strings\n   *  }\n   */\n  init({ elRef, width, height, classList }) {\n    this.elRef = elRef;\n\n    // If no width/height specified, SVG will inherit container element dimensions\n    if (width === undefined) this.responsiveWidth = true;\n    if (height === undefined) this.responsiveHeight = true;\n\n    this.outerWidth = width || this.elRef.offsetWidth;\n    this.outerHeight = height || this.elRef.offsetHeight;\n\n    this.classList = classList || {};\n\n    this.draw();\n  }\n\n  draw() {\n    // Main SVG\n    this.svg = d3.select(this.elRef)\n      .append('svg')\n      .attr('width', this.outerWidth)\n      .attr('height', this.outerHeight)\n      .classed(this.classList.svg || null, true);\n\n    //Inner box group  (deducting margins)\n    this.group = this.svg.append('g')\n      .attr('width', this.outerWidth - this.margin.left - this.margin.right)\n      .attr('height', this.outerHeight - this.margin.top - this.margin.bottom)\n      .attr('transform', `translate(${this.margin.left} , ${this.margin.top})`)\n      .classed(this.classList.group || null, true);\n\n    // X Axis init\n    this.xScale\n      .range([0, this.outerWidth - this.margin.left - this.margin.right]);\n    this.xAxisRef = this.group.append('g')\n      .attr('transform', `translate(0,${this.outerHeight - this.margin.bottom})`)\n      .classed('x-axis', true);\n\n    // Y Axis init\n    this.yScale\n      .range([this.outerHeight - this.margin.bottom, 0]);\n    this.yAxisRef = this.group.append('g')\n      .attr('transform', 'translate(0, 0)')\n      .classed('y-axis', true);\n  }\n\n  addSeries({ name, type, fill, stroke, strokeWidth, id }) {\n    if (this.seriesDict[name]) throw new Error('Series name must be unique!');\n    if (!SERIES_TYPES.includes(type)) throw new Error('Series type not supported!');\n\n    this.seriesDict[name] = {\n      type,\n      ref: this.group.append('path')\n        .attr('fill', fill || 'none')\n        .attr('stroke', stroke || 'black')\n        .attr('stroke-width', strokeWidth || 2)\n        .classed('series', true)\n        .classed('hidden', false)\n    };\n  }\n\n  setSeriesData(name, data, adjustAxes = true) {\n    if (!window.focused) return;\n    const series = this.seriesDict[name];\n\n    this.adjustDimensions();\n\n    if (adjustAxes) this.adjustAxes(data);\n\n    switch (series.type) {\n      case 'AREA':\n        this.updateAreaSeries(series, data);\n        break;\n      case 'LINE':\n      default:\n        this.updateLineSeries(series, data);\n        break;\n    }\n  }\n\n  updateLineSeries(series, data) {\n    series.ref\n      .datum(data)\n      .transition().duration(TRANSITION_DURATION).ease(d3.easeQuadIn)\n      .attr('d', d3.line()\n        .x((d) => { return this.xScale(d.timestamp); })\n        .y((d) => { return this.yScale(d.value); })\n      );\n  }\n\n  updateAreaSeries(series, data) {\n    series.ref\n      .datum(data)\n      .transition().duration(TRANSITION_DURATION).ease(d3.easeQuadIn)\n      .attr('d', d3.area()\n        .x((d) => { return this.xScale(d.timestamp); })\n        .y0(this.yScale(0))\n        .y1((d) => {\n          return this.yScale(d.value);\n        })\n      );\n  }\n\n  toggleSeries = ({ target: { id } }) => {\n    if (id) {\n      const series = this.seriesDict[id];\n      const hidden = series.ref.classed('hidden');\n      series.ref.classed('hidden', !hidden);\n    }\n  }\n\n  // Helper functions\n  adjustAxes(data) {\n    const maxValue = d3.max(data, (d) => d.value);\n\n    this.xScale.domain(d3.extent(data, (d) => d.timestamp));\n    this.xAxisRef\n      .transition().duration(TRANSITION_DURATION).ease(d3.easeLinear)\n      .call(d3.axisBottom(this.xScale));\n\n    this.yScale.domain([0, maxValue]);\n    this.yAxisRef\n      .transition().duration(TRANSITION_DURATION).ease(d3.easeLinear)\n      .call(\n        d3.axisLeft(this.yScale)\n          .ticks(maxValue < MAX_Y_TICKS ? maxValue : MAX_Y_TICKS)\n          .tickFormat(d3.format('d'))\n      );\n  }\n\n  /**\n   * This function adapts axes and lines to width/height inherited from parent container element\n   * So basically if `responsiveHeight` & `responsiveWidth` are true, it fills the parent container\n   */\n  adjustDimensions() {\n    if (this.responsiveHeight) {\n      this.outerHeight = this.elRef.offsetHeight;\n      this.svg.transition().duration(TRANSITION_DURATION).ease(d3.easeLinear)\n        .attr('height', this.outerHeight);\n      this.group.transition().duration(TRANSITION_DURATION).ease(d3.easeLinear)\n        .attr('height', this.outerHeight - this.margin.top - this.margin.bottom);\n      this.yScale\n        .range([this.outerHeight - this.margin.bottom, 0]);\n    }\n\n    if (this.responsiveWidth) {\n      this.outerWidth = this.elRef.offsetWidth;\n      this.svg.transition().duration(TRANSITION_DURATION).ease(d3.easeLinear)\n        .attr('width', this.outerWidth);\n      this.group.transition().duration(TRANSITION_DURATION).ease(d3.easeLinear)\n        .attr('width', this.outerWidth - this.margin.left - this.margin.right);\n      this.xScale\n        .range([0, this.outerWidth - this.margin.left - this.margin.right]);\n    }\n  }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport socketIOClient from 'socket.io-client';\nimport D3TsChart from '../d3-helpers/d3-ts-chart';\n\nconst MAX_POINTS_TO_STORE = 50;\nconst DEFAULT_X_TICKS = 20;\nconst SOCKETIO_ERRORS = ['reconnect_error', 'connect_error', 'connect_timeout', 'connect_failed', 'error'];\n\n/**\n*  Component cycle:\n* 1. `componentDidMount()`\n*     => Initialize a `D3TsChart()` with nod data\n* 2. `socket.connect()` pings WebSocket then on each `on('reading')` event:\n*     => `storeReading()` in component `state`\n*     => `updateChart()` seperates original data from peak detection series\n*         then calls `D3TsChart.setSeriesData()`\n*\n* 3. `componentWillUnmount()` disconects from socket.\n*/\nexport class Chart extends React.Component {\n\n  seriesList = [\n    {\n      name: 'sensor-data',\n      type: 'LINE',\n      stroke: '#038C7E',\n      strokeWidth: 5,\n      label: 'Readings',\n      labelClass: 'readings',\n    },\n    {\n      name: 'z-score',\n      type: 'AREA',\n      fill: 'rgba(216, 13, 49, 0.2)',\n      stroke: 'transparent',\n      strokeWidth: 0,\n      label: 'Peaks',\n      labelClass: 'z-score',\n    }\n  ]\n  tsChart = new D3TsChart();\n  socket;\n  state = {\n    data: [],\n    lastTimestamp: null,\n    connected: false,\n    error: ''\n  }\n\n  componentDidMount() {\n    if (this.props['sensorId'] === undefined) throw new Error('You have to pass \\'sensorId\\' prop to Chart component');\n    if (this.props['x-ticks'] > MAX_POINTS_TO_STORE) throw new Error(`You cannot display more than ${MAX_POINTS_TO_STORE} 'x-ticks'. `);\n\n    const parentRef = ReactDOM.findDOMNode(this);\n\n    this.tsChart.init({\n      elRef: parentRef.getElementsByClassName('chart-container')[0],\n      classList: {\n        svg: 'z-chart'\n      }\n    });\n\n    this.tsChart.addSeries(this.seriesList[0]); // readings\n    this.tsChart.addSeries(this.seriesList[1]); //z-score\n\n    this.connect();\n\n    this.attachFocusWatcher();\n  }\n\n  connect = () => {\n    this.socket = socketIOClient(`/?sensor=${this.props.sensorId}`);\n    this.socket.on('reading', this.storeReading);\n\n    // Various Errors handling\n    SOCKETIO_ERRORS.forEach(errType => {\n      this.socket.on(errType, (error) => this.setError(errType, error));\n    });\n  }\n\n  componentWillUnmount() {\n    this.socket.disconnect();\n  }\n\n  attachFocusWatcher() {\n    window.focused = true;\n    window.onblur = () => {\n      window.focused = false;\n    }\n    window.onfocus = () => {\n      window.focused = true;\n    }\n  }\n\n  setError = (type, error) => {\n    this.setState({ data: [], connected: false, error: `${error.toString()} | ${type}` });\n  }\n\n  /**\n  * `pointsToStore` is the number of stored data points\n  * - We need to cache more date than 20 \n  * - This should be useful when implementing variable `x-ticks` in UI\n  */\n  storeReading = (response) => {\n    const reading = JSON.parse(response);\n    this.setState((prevState) => {\n      const data = prevState.data;\n      const pointsToStore = Math.max(data.length - MAX_POINTS_TO_STORE, 0);\n\n      data.push(reading);\n\n      return {\n        data: data.slice(pointsToStore),\n        connected: true,\n        error: false,\n        lastTimestamp: new Date(data[data.length - 1].timestamp).toLocaleTimeString()\n      };\n    });\n\n    this.updateChart();\n  }\n\n  /**\n   * `highestValueInView` is used to calculate out the highest value in the currently\n   * shown data in order to normalize the zscores 0/1 to it\n   */\n  updateChart() {\n    const xTicks = Math.max(this.state.data.length - (this.props['x-ticks'] || DEFAULT_X_TICKS), 0);\n    const data = this.state.data.slice(xTicks);\n    const highestValueInView = Math.max(...data.map(p => p.value));\n    const zLine = data.map(p => ({ timestamp: p.timestamp, value: p.zscore ? highestValueInView : 0 }));\n\n    this.tsChart.adjustAxes(data);\n    this.tsChart.setSeriesData('sensor-data', data, false);\n    this.tsChart.setSeriesData('z-score', zLine, false);\n  }\n\n  render = () => (\n    <div className=\"card\">\n\n      <h2>{!this.state.lastTimestamp ? 'Connecting...' : `Sensor ${this.props.sensorId}`}</h2>\n\n      <span className={'status ' + (this.state.connected ? 'success' : 'danger')}>\n        {this.state.error}\n        <i className=\"pulse\"></i>\n        {this.state.connected ? 'Connected' : 'Disconnected'}\n      </span>\n\n      <div className={'chart-container ' + (this.state.error ? 'faded' : '')}></div>\n\n\n      <div className=\"legend\">\n        {this.seriesList.map((series) => {\n          return (\n            <span\n              id={series.name}\n              key={series.name}\n              className={series.labelClass}\n              onClick={this.tsChart.toggleSeries}>\n              <i className=\"box\"></i>\n              {series.label}\n            </span>\n          );\n        })}\n      </div>\n\n      <span className={'timestamp ' + (this.state.connected ? 'success' : 'danger')}>\n        {this.state.connected ? '' : 'Last reading was at '}\n        {this.state.lastTimestamp}\n      </span>\n\n    </div>\n  )\n\n}\nexport default Chart;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport Chart from './components/chart';\n\nReactDOM.render(\n  <div>\n    <h1>Sensors Dashboard</h1>\n    <Chart sensorId=\"1\" />\n    <Chart sensorId=\"2\" x-ticks=\"20\" />\n    <Chart sensorId=\"3\" x-ticks=\"20\"/>\n  </div>\n  , document.getElementById('root'));\n"],"sourceRoot":""}